<% content_for :title, @issue.issue_no %>
<% content_for :meta_info do %>
  <meta property="og:title" content="Volume <%= @issue.volume_no %> Issue <%= @issue.issue_no %> | The MQ" />
  <meta property="og:description" content="At least two jokes per issue or your money back." />
  <meta property="og:image" content="<%= image_url(Rails.configuration.x.relative_lws_path) %>" />
<% end %>

<div class="full-issue-show-content pure-g">
  <div class="full-issue-content pure-u-1">
    <div class="issue-articles pure-g">
      <h2 id="issue-articles" class="pure-u-1">Articles In This Issue</h2>
      <div class="top-articles pure-u-1 pure-u-lg-1-3">
        <% @top_articles.each do |article| %>
          <div class="top-article">
            <%= link_to image_tag(article.graphic.get_relative_image_path, alt:"Top Article Graphic", width: '100%'), article %>
            <div class="top-article-tags tag-row">
              <% tags = article.get_tags %>
              <% tags.each do |tag| %>
                <%= link_to(tags_path(tag_id: tag.tag_id), {class: 'tag'}) do %>
                  <button class="button-small pure-button">
                    <i class="fa fa-tag"></i>
                    <%= tag.title %>
                  </button>
                <% end %>
              <% end %>
            </div>
            <h3 class="regular-headline"><%= link_to article.headline, article %></h3>
            <div class="date-author">
              <% @person = article.author %>
              <% @co_author = article.co_author %>
              <p><%= link_to @person.name, @person, {class: 'author-link'} %></p>
              <% if @co_author %>
                <p> - <%= link_to @co_author.name, @co_author, {class: 'author-link'} %></p>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>
      <div class="article-headlines pure-u-1 pure-u-lg-2-3">
        <% @article_headlines.each do |article| %>
          <div class="article-headline regular-headline">
            <% @person = article.author %>
            <% @co_author = article.co_author %>
            <h4><i class="fa fa-caret-right"></i>
              <%= link_to article.headline, article %>
              - <%= link_to @person.name, @person, {class: 'author-link'} %>
            <% if @co_author %>
              , <%= link_to @co_author.name, @co_author, {class: 'author-link'} %>
          <% end %>
            </h4>
            <hr>
          </div>
        <% end %>
      </div>
    </div>

    <div class="issue-ed-pcps pure-g">
      <h2 id="issue-ed-pcps" class="pure-u-1">Editorials In This Issue</h2>
      <% @ed_pcps.each do |ed_pcp| %>
        <div class="ed-pcp pure-g">
          <div class="ed-pcp-inner">
            <div class="ed-pcp-image pure-u-1-4">
              <%= link_to image_tag(ed_pcp.get_relative_author_image_path, alt:"Ed-Pcp Graphic", width: '100%'), ed_pcp %>
            </div>
            <div class="ed-pcp-data pure-u-3-4">
              <div class="ed-pcp-data-text-wrapper">
                <% if ed_pcp.point %>
                  <h3>Point</h3>
                <% end %>
                <h2 class="regular-headline"><%= link_to ed_pcp.headline, ed_pcp %></h2>
                <div class="ed-pcp-tags tag-row">
                  <% ed_pcp_tags = ed_pcp.get_tags %>
                  <% ed_pcp_tags.each do |tag| %>
                    <%= link_to(tags_path(tag_id: tag.tag_id), {class: 'tag'}) do %>
                      <button class="button-small pure-button">
                        <i class="fa fa-tag"></i>
                        <%= tag.title %>
                      </button>
                    <% end %>
                  <% end %>
                </div>
                <div class="author">
                  <p><%= ed_pcp.author %>, <%= ed_pcp.author_title %></p>
                </div>
              </div>
            </div>
          </div>

          <!-- now comes the counterpoint stuff, which is optional -->
          <% if ed_pcp.point %>
            <% cp = ed_pcp.get_counterpoint %>
            <div class="counterpoint-box">
              <div class="author-image pure-u-1-4">
                <%= link_to image_tag(cp.get_relative_author_image_path, alt:"Counterpoint Graphic", width: '100%'),
                  p %>
            </div>
            <div class="cp-text pure-u-3-4">
              <div class="cp-text-wrapper">
                <h3>Counterpoint</h3>
                <h2 class="regular-headline"><%= link_to cp.headline, p %></h2>
                <div class="date-author">
                  <p><%= cp.author %>, <%= cp.author_title %></p>
                </div>
              </div>
            </div>
            </div>

          <% end %>
        </div>
      <% end %>
    </div>

    <div class="issue-top-tens pure-g">
      <hr>
      <h2 id="issue-top-tens" class="pure-u-1">Top Tens In This Issue</h2>
      <div class="top-top-tens pure-u-1 pure-u-lg-1-2">
        <% @top_top_tens.each do |top_ten| %>
          <div class="top-top-ten">
            <%= render 'inline', :top_ten => top_ten %>
          </div>
        <% end %>
      </div>
      <div class="top-ten-titles pure-u-1 pure-u-lg-1-3">
        <h3>Top Ten...</h3>
        <% @top_ten_titles.each do |top_ten| %>
          <h3><%= link_to top_ten.title, top_ten %></h3>
        <% end %>
      </div>

    </div>

    <div class="issue-features pure-g">
      <hr>
      <h2 id="issue-features" class="pure-u-1">Features In This Issue</h2>
        <div class="my-gallery pure-g" itemscope itemtype="http://schema.org/ImageGallery">
          <% @features.each do |feature| %>
            <% feature_path = feature.get_relative_feature_path %>
            <% data_size = feature.width.to_s + "x" + feature.height.to_s %>
            <% feature_title = feature.title %>
            <% share_url =  url_for([feature, {only_path: false}]) %>
            <figure class="feature-data pure-u-1 pure-u-lg-1-4" itemprop="associatedMedia" itemscope itemtype="http://schema.org/ImageObject">
              <a href="<%= ActionController::Base.helpers.asset_path(feature_path) %>" itemprop="contentUrl" data-size="<%= data_size %>" share-url="<%= share_url %>">
                <img src="<%= ActionController::Base.helpers.asset_path(feature_path) %>" itemprop="thumbnail" alt="Image description" />
              </a>
              <figcaption itemprop="caption description"><%= feature_title %></figcaption>
            </figure>
          <% end %>
        </div>

      
    </div>
  </div>

</div>

<!-- Root element of PhotoSwipe. Must have class pswp. -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

  <!-- Background of PhotoSwipe.
       It's a separate element, as animating opacity is faster than rgba(). -->
  <div class="pswp__bg"></div>

  <!-- Slides wrapper with overflow:hidden. -->
  <div class="pswp__scroll-wrap">

    <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
    <div class="pswp__container">
      <!-- don't modify these 3 pswp__item elements, data is added later on -->
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>

    <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">

        <!--  Controls are self-explanatory. Order can be changed. -->

        <div class="pswp__counter"></div>

        <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

        <button class="pswp__button pswp__button--share" title="Share"></button>

        <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

        <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
        <!-- element will get class pswp__preloader-active when preloader is running -->
        <div class="pswp__preloader">
          <div class="pswp__preloader__icn">
            <div class="pswp__preloader__cut">
              <div class="pswp__preloader__donut"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
        <div class="pswp__share-tooltip"></div>
      </div>

      <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
      </button>

      <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
      </button>

      <div class="pswp__caption">
        <div class="pswp__caption__center"></div>
      </div>

    </div>

  </div>

</div>


<!-- Root element of PhotoSwipe. Must have class pswp. -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">

  <!-- Background of PhotoSwipe.
       It's a separate element, as animating opacity is faster than rgba(). -->
  <div class="pswp__bg"></div>

  <!-- Slides wrapper with overflow:hidden. -->
  <div class="pswp__scroll-wrap">

    <!-- Container that holds slides. PhotoSwipe keeps only 3 slides in DOM to save memory. -->
    <div class="pswp__container">
      <!-- don't modify these 3 pswp__item elements, data is added later on -->
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
      <div class="pswp__item"></div>
    </div>

    <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
    <div class="pswp__ui pswp__ui--hidden">
      <div class="pswp__top-bar">

        <!--  Controls are self-explanatory. Order can be changed. -->

        <div class="pswp__counter"></div>

        <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>

        <button class="pswp__button pswp__button--share" title="Share"></button>

        <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>

        <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>

        <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
        <!-- element will get class pswp__preloader-active when preloader is running -->
        <div class="pswp__preloader">
          <div class="pswp__preloader__icn">
            <div class="pswp__preloader__cut">
              <div class="pswp__preloader__donut"></div>
            </div>
          </div>
        </div>
      </div>

      <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
        <div class="pswp__share-tooltip"></div>
      </div>

      <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
      </button>

      <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
      </button>

      <div class="pswp__caption">
        <div class="pswp__caption__center"></div>
      </div>

    </div>

  </div>

</div>

<script>
var initPhotoSwipeFromDOM = function(gallerySelector) {

  // parse slide data (url, title, size ...) from DOM elements
  // (children of gallerySelector)
  var parseThumbnailElements = function(el) {
    var thumbElements = el.childNodes,
        numNodes = thumbElements.length,
        items = [],
        figureEl,
        linkEl,
        size,
        item;

    for(var i = 0; i < numNodes; i++) {
      figureEl = thumbElements[i]; // <figure> element
      // include only element nodes
      if(figureEl.nodeType !== 1) {
        continue;
      }

      linkEl = figureEl.children[0]; // <a> element

      size = linkEl.getAttribute('data-size').split('x');
      share_url = linkEl.getAttribute('share-url');

      // create slide object
      item = {
        src: linkEl.getAttribute('href'),
         w: parseInt(size[0], 10),
         h: parseInt(size[1], 10),
         share_url: share_url
      };

      if(figureEl.children.length > 1) {
        // <figcaption> content
        item.title = figureEl.children[1].innerHTML;
      }

      if(linkEl.children.length > 0) {
        // <img> thumbnail element, retrieving thumbnail url
        item.msrc = linkEl.children[0].getAttribute('src');
      }

      item.el = figureEl; // save link to element for getThumbBoundsFn
      items.push(item);
    }

    return items;
  };

  // find nearest parent element
  var closest = function closest(el, fn) {
    return el && ( fn(el) ? el : closest(el.parentNode, fn) );
  };

  // triggers when user clicks on thumbnail
  var onThumbnailsClick = function(e) {
    e = e || window.event;
    e.preventDefault ? e.preventDefault() : e.returnValue = false;
    var eTarget = e.target || e.srcElement;
    // find root element of slide
    var clickedListItem = closest(eTarget, function(el) {
        return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
        });

    if(!clickedListItem) {
      return;
    }

    // find index of clicked item by looping through all child nodes
    // alternatively, you may define index via data- attribute
    var clickedGallery = clickedListItem.parentNode,
        childNodes = clickedListItem.parentNode.childNodes,
        numChildNodes = childNodes.length,
        nodeIndex = 0,
        index;
    for (var i = 0; i < numChildNodes; i++) {
      if(childNodes[i].nodeType !== 1) {
        continue;
      }

      if(childNodes[i] === clickedListItem) {
        index = nodeIndex;
        break;
      }
      nodeIndex++;
    }

    if(index >= 0) {
      // open PhotoSwipe if valid index found
      openPhotoSwipe( index, clickedGallery );
    }
    return false;
  };

  // parse picture index and gallery index from URL (#&pid=1&gid=2)
  var photoswipeParseHash = function() {
    var hash = window.location.hash.substring(1),
        params = {};
    if(hash.length < 5) {
      return params;
    }

    var vars = hash.split('&');
    for (var i = 0; i < vars.length; i++) {
      if(!vars[i]) {
        continue;
      }

      var pair = vars[i].split('=');
      if(pair.length < 2) {
        continue;
      }

      params[pair[0]] = pair[1];
    }

    if(params.gid) {
      params.gid = parseInt(params.gid, 10);
    }

    return params;
   };

  var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
    var pswpElement = document.querySelectorAll('.pswp')[0],
        gallery,
        options,
        items;

    items = parseThumbnailElements(galleryElement);

    // define options (if needed)
    options = {
      // define gallery index (for URL)
      galleryUID: galleryElement.getAttribute('data-pswp-uid'),
            getThumbBoundsFn: function(index) {
              // See Options -> getThumbBoundsFn section of documentation for more info
              var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
              rect = thumbnail.getBoundingClientRect();
              return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
            }
    };

    // PhotoSwipe opened from URL

    if(fromURL) {
      if(options.galleryPIDs) {
        // parse real index when custom PIDs are used
        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
        for(var j = 0; j < items.length; j++) {
          if(items[j].pid == index) {
            options.index = j;
            break;
          }
        }
      } else {
        // in URL indexes start from 1
        options.index = parseInt(index, 10) - 1;
      }
    } else {
      options.index = parseInt(index, 10);
    }

    // exit if index not found
    if( isNaN(options.index) ) {
      return;
    }

    if(disableAnimation) {
      options.showAnimationDuration = 0;
    }

    // Pass data to PhotoSwipe and initialize it
    gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
    gallery.init();
  };

  // loop through all gallery elements and bind events
  var galleryElements = document.querySelectorAll( gallerySelector );

  for(var i = 0, l = galleryElements.length; i < l; i++) {
    galleryElements[i].setAttribute('data-pswp-uid', i+1);
    galleryElements[i].onclick = onThumbnailsClick;
  }

  // Parse URL and open gallery if it contains #&pid=3&gid=1
  var hashData = photoswipeParseHash();
  if(hashData.pid && hashData.gid) {
    openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
  }
};

// execute above function

initPhotoSwipeFromDOM('.my-gallery');

</script>
